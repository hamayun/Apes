#!/usr/bin/env ruby

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'ocm/id'
require 'ocm/interface'
require 'apes/object_file'
require 'apes/cc_unit'
require 'apes/ld_unit'

require 'rubygems'
require 'term/ansicolor'

#
# Define program usage
#

def program_usage
  puts "Usage: apes-compose {<name> <version>}"
  puts "\t--clean                 : clean the interface graph"
  puts "\t--help                  : print this help"
  puts "\t--verbose               : display the full compilation commands"
end

#
# Define the build directory
#

CACHE_DIRECTORY = ENV['HOME'] + "/.apes"

#
# Create the objects directory
#

if not File.exist?(CACHE_DIRECTORY) then
  Dir.mkdir(CACHE_DIRECTORY)
end

#
# Duplicate the argument list
#

verbose_mode = :normal
cc_action = :compile

ARGV.uniq!
arguments = ARGV.clone

begin
  ARGV.each do |arg|
    if arg.include?("--") then
      case arg
      when "--clean"
        cc_action = :clean
        arguments.delete("--clean")
      when "--help"
        program_usage
        arguments.delete("--help")
        exit
      when "--verbose"
        verbose_mode = :verbose
        arguments.delete("--verbose")
      end
    end
  end

  #
  # Find the interface to build
  #

  interface_list = APELibraryParser.getInterfaceList

  case arguments.count
  when 0 
    interface = OCMInterface.createFromXMLFileAtPath Dir.pwd

    if interface == nil then
      abort '[apes-compose] no interface in this directory.'
    end

    if APELibraryParser.findInterfaceWith(interface.id).empty? then
      interface_list << interface
    end

  when 2
    id = OCMId.new(arguments[0], nil, arguments[1])
    interfaces = APELibraryParser.findInterfaceWith(id)

    if interfaces == nil or interfaces.empty? then
      abort "[apes-compose] " + id.to_s + ": no match found."
    elsif interfaces.length != 1 then
      abort "[apes-compose] " + id.to_s + ": multiple matches found."
    end

    interface = interfaces.first

  else
    program_usage
    abort
  end

  #
  # Define the binary name
  #

  BINARY = "#{Dir.pwd}/#{interface.id.short_name}"


  #
  # Check the interface dependences
  #

  dependences = interface.resolveDependences(interface_list)

  if dependences.empty? then
    abort "[apes-compose] no dependences for: " + interface.id.to_s
  end

  #
  # Build the interface
  #

  cc_units = []

  dependences.each do |d|
    if not d.wrapper then
      unit = APECompilationUnit.createWith(d)
      d.resolveDependences(dependences).each do |l|
        unit << "#{l.path}/Headers/Public" unless l.wrapper
      end
      
      cc_units << unit
      unit.updateObjectCache(CACHE_DIRECTORY)

      case cc_action
      when :compile
        unit.build(verbose_mode) if unit.update
      when :clean
        unit.clean(verbose_mode)
      end
    end
  end

  #
  # If we are compiling, link all the objects altogether
  #

  if cc_action == :compile then
    APELinkUnit.link(BINARY,CACHE_DIRECTORY,cc_units,verbose_mode)
  end

rescue APECompilationUnit::CompilationError => e
  puts "\r\e[2K[Compilation error]".red
  puts e.message
  exit
rescue APELinkUnit::LinkError => e
  puts "\r\e[2K[Link error]".red
  puts e.message
  exit
rescue APEObjectFile::ObjectError => e
  puts "\r\e[2K[Object error]".red
  puts e.message
  exit
rescue RuntimeError => e
  puts '[apes-compose] variable APES_PATH not defined.'
  puts e.message
  exit
rescue Errno::ENOENT => e
  print '[apes-compose] '
  puts e.message
  exit
rescue => e
  puts e.backtrace
  puts "\r\e[2KRuby exception: #{e.message}".red
  exit
end 
