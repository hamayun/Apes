#!/usr/bin/env ruby

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'apes/id'
require 'apes/resolve'
require 'apes/object_file'
require 'apes/cc_unit'
require 'apes/ld_unit'

require 'rubygems'
require 'term/ansicolor'
require 'tmpdir'

#
# Define program usage
#

def program_usage
  puts "Usage: apes-compose {<name> <version>}"
  puts "\t--clean                 : clean the component graph"
  puts "\t--help                  : print this help"
  puts "\t--verbose               : display the full compilation commands"
end

#
# Define the build directory
#

CACHE_DIRECTORY = ENV['HOME'] + "/.apes"

#
# Create the objects directory
#

if not File.exist?(CACHE_DIRECTORY) then
  Dir.mkdir(CACHE_DIRECTORY)
end

#
# Duplicate the argument list
#

verbose_mode = :normal
cc_action = :compile

ARGV.uniq!
arguments = ARGV.clone

begin
  ARGV.each do |arg|
    if arg.include?("--") then
      case arg
      when "--clean"
        cc_action = :clean
        arguments.delete("--clean")
      when "--help"
        program_usage
        arguments.delete("--help")
        exit
      when "--verbose"
        verbose_mode = :verbose
        arguments.delete("--verbose")
      end
    end
  end

  #
  # Find the component to build
  #

  component_list = APELibraryParser.getComponentList

  case arguments.count
  when 0 
    component = APEComponent.createFromXMLFileAtPath Dir.pwd

    if component == nil then
      abort '[apes-compose] no component in this directory.'
    end

    if APELibraryParser.findComponentWith(component.id).empty? then
      component_list << component
    end

  when 2
    id = APEId.new(arguments[0], nil, arguments[1])
    components = APELibraryParser.findComponentWith(id)

    if components == nil or components.empty? then
      abort "[apes-compose] " + id.to_s + ": no match found."
    elsif components.length != 1 then
      abort "[apes-compose] " + id.to_s + ": multiple matches found."
    end

    component = components.first

  else
    program_usage
    abort
  end

  #
  # Define the binary name
  #

  BINARY = "#{Dir.pwd}/#{component.id.short_name}"


  #
  # Check the component dependencies
  #

  dependencies = component_resolve(component, component_list)

  if dependencies.empty? then
    abort "[apes-compose] no dependencies for: " + component.id.to_s
  end

  #
  # Build the component
  #

  cc_units = []

  dependencies.each do |d|
    if not d.wrapper then
      unit = APECompilationUnit.createWith(d)
      component_resolve(d, dependencies).each do |l|
        unit << "#{l.path}/Headers/Public" unless l.wrapper
      end
      cc_units << unit
    end
  end

  # Update units object caches
  cc_units.each { |cc| cc.updateObjectCache(CACHE_DIRECTORY) }

  # Depending on the execution mode, build or clean the object cache
  case cc_action
  when :compile
    cc_units.each do |cc|
      cc.build(verbose_mode) unless not cc.update
    end
    APELinkUnit.link(BINARY,CACHE_DIRECTORY,cc_units,verbose_mode)
  when :clean
    cc_units.each { |cc| cc.clean(verbose_mode) }
  end

rescue APECompilationUnit::CompilationError => e
  puts "\r\e[2K[Compilation error]".red
  puts e.message
  exit
rescue APELinkUnit::LinkError => e
  puts "\r\e[2K[Link error]".red
  puts e.message
  exit
rescue APEObjectFile::ObjectError => e
  puts "\r\e[2K[Object error]".red
  puts e.message
  exit
rescue RuntimeError => e
  puts '[apes-compose] variable APES_COMPONENT_PATH not defined.'
  puts e.message
  exit
rescue Errno::ENOENT => e
  print '[apes-compose] error in APES_COMPONENT_PATH: '
  puts e.message
  exit
rescue => e
  puts e.backtrace
  puts "\r\e[2KRuby exception: #{e.message}".red
  exit
end 
