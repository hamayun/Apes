#!/usr/local/bin/ruby

require 'apes/parse'
require 'pp'

def program_usage
  puts "Usage: apes-info <name>"
end

if ENV["APES_ROOT"] == nil or ENV["APES_ROOT"].empty? then
  abort "[info] The APES_ROOT variable is not defined."
end

if ARGV.count != 1 then
  program_usage
  abort
end

components = []

APEParseLibrary(Dir.pwd, components)
APEParseLibrary(ENV["APES_ROOT"], components)

match_list = components.find_all do |e|
  e.id.name == ARGV[0]
end

if match_list.empty? then
  abort "[info] " + ARGV[0] + ": no match found."
else
  match_list.each do |e| 
    puts "[" + e.id.name + ", " + e.id.version + "]"
    puts "author = " + e.author
    puts "wrapper = " + e.wrapper.to_s + ", unique = " + e.unique.to_s
    puts

    puts "[Path:] "
    puts e.path
    puts

    if not (e.provided_methods.empty? and e.provided_definitions.empty? \
            and provided_types.empty?) then
      puts "[Provides]"

      e.provided_types.each do |t|
        puts t.to_s
      end

      e.provided_definitions.each do |d|
        puts d.to_s
      end

      e.provided_methods.each do |m|
        puts m.to_s
      end
    end

    puts

    if not (e.required_methods.empty? and e.required_definitions.empty? \
            and required_types.empty?) then
      puts "[Requires:]"

      e.required_types.each do |t|
        puts t.to_s
      end

      e.required_definitions.each do |d|
        puts d.to_s
      end

      e.required_methods.each do |m|
        puts m.to_s
      end
    end
  end
end

