#!/usr/local/bin/ruby

require 'apes/id'
require 'apes/parse'

def program_usage
  puts "Usage: apes-info <name> <version>"
end

if ENV["APES_ROOT"] == nil or ENV["APES_ROOT"].empty? then
  abort "[info] The APES_ROOT variable is not defined."
end

#
# Test the arguments
#

if ARGV.count != 2 then
  program_usage
  abort
end

#
# Create an ID for the component
#

id = APEId.new(ARGV[0], nil, ARGV[1])

#
# Retrieve the component
#

components = []

APEParseLibrary(Dir.pwd, components)
APEParseLibrary(ENV["APES_ROOT"], components)

match_list = components.find_all { |e| e.id == id }

if match_list.empty? then
  abort "[info] " + ARGV[0] + "-" + ARGV[1] + ": no match found."
elsif match_list.length > 1 then
  abort "[info] " + ARGV[0] + "-" + ARGV[1] + ": multiple matches found."
end

component = match_list[0]

puts "[" + component.id.name + ", " + component.id.version + "]"
puts "author = " + component.author
puts "wrapper = " + component.wrapper.to_s + ", unique = " + component.unique.to_s
puts

puts "[Path:] "
puts component.path
puts

if not (component.provided_methods.empty? and component.provided_definitions.empty? \
        and provided_types.empty?) then
  puts "[Provides]"

  component.provided_types.each do |t|
    puts t.to_s
  end

  component.provided_definitions.each do |d|
    puts d.to_s
  end

  component.provided_methods.each do |m|
    puts m.to_s
  end
end

puts

if not (component.required_methods.empty? and component.required_definitions.empty? \
        and component.required_types.empty?) then
  puts "[Requires:]"

  component.required_types.each do |t|
    puts t.to_s
  end

  component.required_definitions.each do |d|
    puts d.to_s
  end

  component.required_methods.each do |m|
    puts m.to_s
  end
end
