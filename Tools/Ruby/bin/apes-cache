#!/usr/bin/env ruby

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'apes/object_file'

require 'rubygems'
require 'term/ansicolor'

#
# Define program usage
#

def program_usage
  puts "Usage: apes-cache {show,purge}"
  puts "\tshow                    : show the cache's content"
  puts "\tpurge                   : purge the cache"
  puts "\tprune                   : prune invalid cache entries"
  puts "\t--help                  : print this help"
  puts "\t--verbose               : verbose mode"
end

#
# Define the build directory
#

CACHE_DIRECTORY = ENV['HOME'] + "/.apes"

#
# Create the objects directory
#

if not File.exist?(CACHE_DIRECTORY) then
  Dir.mkdir(CACHE_DIRECTORY)
end

#
# Duplicate the argument list
#

verbose_mode = :normal
cc_action = nil

ARGV.uniq!
arguments = ARGV.clone

ARGV.each do |arg|
  case arg
  when "show", "purge", "prune"
    if cc_action == nil then
      cc_action = arg.to_sym
      arguments.delete(arg)
    else
      program_usage
      abort
    end
  when "--help"
    program_usage
    arguments.delete("--help")
    exit
  when "--verbose"
    verbose_mode = :verbose
    arguments.delete("--verbose")
  end
end

#
# Check if the action is valid
#

if cc_action == nil then
  program_usage
  abort
end

#
# Deal with the action
#

begin
  case cc_action
  when :purge
    Dir.glob(CACHE_DIRECTORY + "/*").each do |file|
      object = APEObjectFile.createFrom(file)
      object.delete
    end

  when :show
    Dir.glob(CACHE_DIRECTORY + "/*").each do |file|
      object = APEObjectFile.createFrom(file)
      if object == nil then
        puts file.split('/').last.blue + " [INVALID]".red
      else
        print object.SHA1.blue + ' '
        puts object.validate ? "[OK]".green : "[UNREFERENCED]".red
        puts '| Component: ' + object.component + ', ' + object.version
        puts '| Source file: ' + object.source.split('/').last
        puts '| Flags: ' + object.flags
      end
    end

  when :prune
    Dir.glob(CACHE_DIRECTORY + "/*").each do |file|
      object = APEObjectFile.createFrom(file)
      if object == nil then
        File.delete(file)
        puts file.split('/').last.blue + " [DELETED]".red
      elsif not object.validate then
        object.delete
        puts object.SHA1.blue + " [DELETED]".red
        puts '| Component: ' + object.component + ', ' + object.version
        puts '| Source file: ' + object.source.split('/').last
        puts '| Flags: ' + object.flags
      end
    end

  else
    program_usage
    abort
  end

rescue APEObjectFile::ObjectError => e
  puts "\r\e[2K[Object error]".red
  puts e.message
  exit
rescue RuntimeError
  puts '[apes-cache] variable APES_COMPONENT_PATH not defined.'
  exit
rescue Errno::ENOENT => e
  print '[apes-cache] error in APES_COMPONENT_PATH: '
  puts e.message
  exit
rescue => e
  puts e.backtrace
  puts "\r\e[2KRuby exception: #{e.message}".red
  exit
end 
