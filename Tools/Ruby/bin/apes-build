#!/usr/local/bin/ruby

require 'apes/resolve'
require 'apes/depend'
require 'tmpdir'
require 'open4'

def program_usage
  puts "Usage: apes-build {--keep,--here,--verbose} <name>"
end

if ENV["APES_ROOT"] == nil or ENV["APES_ROOT"].empty? then
  abort "The APES_ROOT variable is not defined."
end

keep_objets = false
verbose_build = false
build_here = false

ARGV.uniq!
arguments = ARGV.clone

ARGV.each do |arg|
  if arg.include?("--") then
    case arg
    when "--keep"
      keep_objets = true
      arguments.delete("--keep")
    when "--here"
      build_here = true
      arguments.delete("--here")
    when "--verbose"
      verbose_build = true
      arguments.delete("--verbose")
    else
      program_usage
      abort
    end
  end
end

if arguments.count != 1 then
  program_usage
  abort
end

components = []
dependencies = []
components_list = []

APEParseLibrary(Dir.pwd, components_list)
APEParseLibrary(ENV["APES_ROOT"], components_list)

components = components_list.find_all do |e|
  e.id.name == arguments[0]
end

if components == nil || components.empty? then
  abort arguments[0] + ": no match found."

elsif components.length != 1 then
  abort name + ": multiple matches found."
else
  dependencies = component_resolve(components[0], components_list, [])

  if dependencies.empty? then
    abort "No dependencies for: " + arguments[0]
  end
end

#
# Make a temporary directory
#

if build_here then
  if FileTest.exist?("build") then
    abort "[mktmpdir] --here set, and build/ exists."
  else
    Dir.mkdir("build")
    tmpdir = Dir.pwd + "/build"
    if verbose_build then puts "[mktmpdir] " + tmpdir end
  end
else
  tmpdir = Dir.mktmpdir("apes-")
  if verbose_build then puts "[mktmpdir] " + tmpdir end
end

#
# Create the main makefile
#

makefile = File.open(tmpdir + "/Makefile", "w+")

makefile.puts "SUBDIRS = "
makefile.puts "OBJECTS = "
makefile.puts

dependencies.each do |d|
  if not d.wrapper then
    makefile.puts "SUBDIRS += " + d.id.name
    makefile.puts "OBJECTS += " + d.id.name + "/*.o"
    makefile.puts
  end
end
makefile.puts

makefile.puts "default: build link"
makefile.puts

makefile.puts "build:"
makefile.puts "\tfor i in $(SUBDIRS); \\"
makefile.puts "\t\tdo echo '[CC] '$$i' \\c'; \\"
makefile.puts "\t\tmake -C $$i default || exit $?; \\"
makefile.puts "\t\techo '\r[OK] '$$i; \\"
makefile.puts "\t\tdone;"
makefile.puts

makefile.puts "link:"
makefile.puts "\techo -n '[LD] " + components[0].id.short_name + ".x'"
makefile.print "\t$(TARGET_LD) $(TARGET_LDFLAGS) "
makefile.print "-o $(PWD)/" + components[0].id.short_name + ".x "
makefile.puts "$(OBJECTS) $(LDFLAGS)"
makefile.puts "\techo '\r[OK] " + components[0].id.short_name + ".x'"

makefile.close

#
# Populate the temporary directory
#

dependencies.each do |d|
  if not d.wrapper then
    Dir.mkdir(tmpdir + "/" + d.id.name)
    makefile = File.open(tmpdir + "/" + d.id.name + "/Makefile", "w+")

    makefile.puts "CFLAGS = $(TARGET_CFLAGS)"

    local_deps = component_resolve(d, dependencies, [])
    local_deps.each do |l|
      if l == d then
        makefile.puts "CFLAGS += -I" + d.path + "/headers"
      end

      if not l.wrapper then
        makefile.puts "CFLAGS += -I" + l.path + "/headers/public"
      end
    end
    makefile.puts

    makefile.puts "SRCDIR = " + d.path + "/sources"
    makefile.puts "CSRCS = $(wildcard $(SRCDIR)/*.c)" 
    makefile.puts "ASRCS = $(wildcard $(SRCDIR)/*.S)" 
    makefile.puts "OBJS = $(CSRCS:$(SRCDIR)/%.c=%.o)" 
    makefile.puts "OBJS += $(ASRCS:$(SRCDIR)/%.S=%.o)" 
    makefile.puts "NOBJS = $(shell echo $(OBJS) | wc -w | tr -d ' ')" 
    makefile.puts "NOBJSP = $(shell dc -e '$(NOBJS) 1 + p')" 
    makefile.puts

    makefile.puts "default: prefix $(OBJS) suffix"
    makefile.puts "ifneq (\"$(NOBJS)\", \"0\")"
    makefile.puts "\techo -n '\e['$(NOBJS)'D\e[K'"
    makefile.puts "endif"
    makefile.puts "\ttouch dummy.o"
    makefile.puts

    makefile.puts "prefix:"
    makefile.puts "ifneq (\"$(NOBJS)\",\"0\")"
    makefile.puts "\techo -n '['"
    makefile.puts "\tfor i in {1..$(NOBJS)} ; do echo '-\\c'; done"
    makefile.puts "\techo -n ']\e[$(NOBJSP)D'"
    makefile.puts "endif"
    makefile.puts

    makefile.puts "suffix:"
    makefile.puts "ifneq (\"$(NOBJS)\",\"0\")"
    makefile.puts "\techo -n '\e[$(NOBJSP)D\e[K'"
    makefile.puts "endif"

    makefile.puts "%.o : $(SRCDIR)/%.c"
    makefile.puts "\techo -n '>\e[D'"
	  makefile.puts "\t$(TARGET_CC) -c -o $@ $(CFLAGS) $<"
    makefile.puts "\techo -n '='"
    makefile.puts

    makefile.puts "%.o : $(SRCDIR)/%.S"
	  makefile.puts "\t$(TARGET_CC) -c -o $@ $(CFLAGS) $<"
    makefile.puts "\techo -n '='"
    makefile.puts

    makefile.close
  end
end

#
# Launch the make process
#

cmd = "make" + (verbose_build ? "" : " -s") + " -C " + tmpdir + " default";
pid, stdin, stdout, stderr = Open4::popen4(cmd);

IO.copy_stream(stdout, $stdout)
ignored, status = Process::waitpid2 pid

if status != 0 then
  puts "ERROR]\e[K\n"
  puts "<Compiler report:>"
  stderr.lines.each do |line|
    if line[0..3] != "make" then
      index = line.index(/[^\/]*.[c,h]:/)
      puts line[index..-1]
    end
  end
end

#
# Clean everything up
#

if keep_objets then
  if verbose_build then puts "[rm-rf] bypassed" end
else
  if verbose_build then puts "[rm-rf] " + tmpdir end
  FileUtils.rm_rf(tmpdir)
end
