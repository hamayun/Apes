#!/usr/bin/ruby

require 'apes/id'
require 'apes/genbox'
require 'rubygems'
require 'open4'

#
# Define program usage
#

def program_usage
  puts "Usage: apes-build {--keep,--here,--verbose} {<name> <version>}"
end

#
# Reset global configurations
#

keep_objets = false
verbose_build = false
build_here = false

#
# Parse the arguments
#

ARGV.uniq!
arguments = ARGV.clone

ARGV.each do |arg|
  if arg.include?("--") then
    case arg
    when "--keep"
      keep_objets = true
      arguments.delete("--keep")
    when "--here"
      build_here = true
      arguments.delete("--here")
    when "--verbose"
      verbose_build = true
      arguments.delete("--verbose")
    else
      program_usage
      abort
    end
  end
end

#
# Get the component list
#

begin
  component_list = APELibraryParser.getComponentList
rescue RuntimeError
  puts '[build] Variable APES_COMPONENT_PATH not defined.'
  abort
end

#
# Find the component to build
#

components = []

case arguments.count
when 0 

  component = APEComponent.createFromXMLFileAtPath Dir.pwd

  if component == nil then
    abort "[build] No component in this directory."
  end

  components = component_list.find_all { |e| e.id == component.id }

when 2

  id = APEId.new(arguments[0], nil, arguments[1])
  components = component_list.find_all { |e| e.id == id }

else
  program_usage
  abort
end

if components == nil or components.empty? then
  abort "[build] " + id.to_s + ": no match found."
elsif components.length != 1 then
  abort "[build] " + id.to_s + ": multiple matches found."
end

puts "[build] Building component " + components[0].id.to_s + "."

#
# Generate the sandbox
#

tmpdir = generate_sandbox components[0], component_list, build_here 

#
# Launch the make process
#

cmd = "make" + (verbose_build ? "" : " -s") + " -C " + tmpdir + " default";
pid, stdin, stdout, stderr = Open4::popen4(cmd);

IO.copy_stream(stdout, $stdout)
ignored, status = Process::waitpid2 pid

if status != 0 then
  puts "ERROR]\e[K"
  puts
  puts "<Compiler report:>"
  stderr.lines.each do |line|
    if line[0..3] != "make" then
      index = line.index(/[^\/]*.[c,h]:/)
      if index == nil then
        puts "(" + line.chop + ")"
      else
        puts line[index..-1]
      end
    end
  end
end

#
# Clean everything up
#

if keep_objets then
  puts "[rm-rf] bypassed"
else
  puts "[rm-rf] " + tmpdir
  FileUtils.rm_rf(tmpdir)
end
