#!/usr/local/bin/ruby

require 'apes/id'
require 'apes/genbox'
require 'open4'

#
# Define program usage
#

def program_usage
  puts "Usage: apes-build {--keep,--here,--verbose} <name> <version>"
end

#
# Check if the APES_ROOT variable exists
#

if ENV["APES_ROOT"] == nil or ENV["APES_ROOT"].empty? then
  abort "[build] The APES_ROOT variable is not defined."
end

#
# Reset global configurations
#

keep_objets = false
verbose_build = false
build_here = false

#
# Parse the arguments
#

ARGV.uniq!
arguments = ARGV.clone

ARGV.each do |arg|
  if arg.include?("--") then
    case arg
    when "--keep"
      keep_objets = true
      arguments.delete("--keep")
    when "--here"
      build_here = true
      arguments.delete("--here")
    when "--verbose"
      verbose_build = true
      arguments.delete("--verbose")
    else
      program_usage
      abort
    end
  end
end

if arguments.count != 2 then
  program_usage
  abort
end

#
# Create an ID for the component to build
#

id = APEId.new(arguments[0], nil, arguments[1])

#
# Parse the library
#

components = []
components_list = []

APEParseLibrary(Dir.pwd, components_list)
APEParseLibrary(ENV["APES_ROOT"], components_list)

components = components_list.find_all { |e| e.id == id }

if components == nil or components.empty? then
  abort "[build] " + id.to_s + ": no match found."
elsif components.length != 1 then
  abort "[build] " + id.to_s + ": multiple matches found."
end

#
# Generate the sandbox
#

tmpdir = generate_sandbox(components[0], components_list, build_here)

#
# Launch the make process
#

cmd = "make" + (verbose_build ? "" : " -s") + " -C " + tmpdir + " default";
pid, stdin, stdout, stderr = Open4::popen4(cmd);

IO.copy_stream(stdout, $stdout)
ignored, status = Process::waitpid2 pid

if status != 0 then
  puts "ERROR]\e[K"
  puts
  puts "<Compiler report:>"
  stderr.lines.each do |line|
    if line[0..3] != "make" then
      index = line.index(/[^\/]*.[c,h]:/)
      if index == nil then
        puts "(" + line.chop + ")"
      else
        puts line[index..-1]
      end
    end
  end
end

#
# Clean everything up
#

if keep_objets then
  puts "[rm-rf] bypassed"
else
  puts "[rm-rf] " + tmpdir
  FileUtils.rm_rf(tmpdir)
end
