#!/usr/local/bin/ruby

require 'apes/id'
require 'apes/depend'
require 'apes/resolve'

def program_usage
  puts "Usage: apes-graph <name> <version>"
end

#
# Check the APES_ROOT variable
#

if ENV["APES_ROOT"] == nil or ENV["APES_ROOT"].empty? then
  abort "[graph] The APES_ROOT variable is not defined."
end

#
# Check the CLI arguments
#

if ARGV.count != 2 then
  program_usage
  abort
end

#
# Create an ID for the component
#

id = APEId.new(ARGV[0], nil, ARGV[1])

#
# Look for the component in the library
#

components = []
dependencies = []
components_list = []

APEParseLibrary(Dir.pwd, components_list)
APEParseLibrary(ENV["APES_ROOT"], components_list)

components = components_list.find_all { |e| e.id == id }

if components == nil or components.empty? then
  abort "[graph] " + ARGV[0] + ": no match found."
elsif components.length != 1 then
  abort "[graph] " + name + ": multiple matches found."
end

#
# Compute the graph
#

dependencies = component_resolve(components[0], components_list, [])

if dependencies.empty? then
  puts "[graph] No dependencies for: " + ARGV[0]
else
  resolved = []
  next_deps = []

  puts "digraph " + components[0].id.name + " {"

  dependencies.each do |d|
    if resolved.find { |r| r == d } == nil then
      next_deps = component_depend(d, dependencies)
      puts "\t" + d.id.short_name + " [fontsize=16,style=filled];"
      next_deps.each do |n|
        puts "\t" + d.id.short_name + " -> " + n.id.short_name + ";"
      end
      resolved << d
    end
  end

  puts "}"
end
