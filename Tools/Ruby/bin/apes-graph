#!/usr/bin/env ruby

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'ocm/id'
require 'ocm/interface'
require 'apes/parser'

def program_usage
  puts "Usage: apes-graph <name> <version>"
end

#
# Get the interface list
#

begin
  interface_list = APELibraryParser.getInterfaceList
rescue RuntimeError
  puts '[apes-graph] Variable APES_COMPONENT_PATH not defined.'
  abort
rescue Errno::ENOENT => detail
  print '[apes-graph] error in APES_COMPONENT_PATH: '
  puts detail.message
  abort
end

#
# Check the CLI arguments
#

ARGV.uniq!
arguments = ARGV.clone
interfaces = []

case arguments.count
when 0 

  interface = OCMInterface.createFromXMLFileAtPath Dir.pwd

  if interface == nil then
    abort '[apes-graph] no interface in this directory.'
  end

  if interface_list.find { |e| e == interface } == nil then
    interface_list << interface
  end

when 2

  id = OCMId.new(arguments[0], nil, arguments[1])
  interfaces = APELibraryParser.findInterfaceWith(id)

  if interfaces == nil or interfaces.empty? then
    abort "[apes-graph] " + id.to_s + ": no match found."
  elsif interfaces.length != 1 then
    abort "[apes-graph] " + id.to_s + ": multiple matches found."
  end

  interface = interfaces.first

else
  program_usage
  abort
end

#
# Compute the graph
#

dependences = interface.resolveDependences(interface_list)

if dependences.empty? then
  puts "[apes-graph] No dependences for: " + ARGV[0]
else
  resolved, next_deps = [], []
  puts "digraph " + interface.id.name + " {"

  dependences.each do |d|
    if resolved.find { |r| r == d } == nil then
      next_deps = d.computeDependences(dependences)
      puts "\t" + d.id.short_name + " [fontsize=16,style=filled];"
      next_deps.each do |n|
        puts "\t" + d.id.short_name + " -> " + n.id.short_name + ";"
      end
      resolved << d
    end
  end

  puts "}"
end
