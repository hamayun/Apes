#!/usr/bin/env ruby

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'apes/id'
require 'apes/depend'
require 'apes/resolve'

def program_usage
  puts "Usage: apes-graph <name> <version>"
end

#
# Get the component list
#

begin
  component_list = APELibraryParser.getComponentList
rescue RuntimeError
  puts '[apes-graph] Variable APES_COMPONENT_PATH not defined.'
  abort
rescue Errno::ENOENT => detail
  print '[apes-graph] error in APES_COMPONENT_PATH: '
  puts detail.message
  abort
end

#
# Check the CLI arguments
#

ARGV.uniq!
arguments = ARGV.clone
components = []

case arguments.count
when 0 

  component = APEComponent.createFromXMLFileAtPath Dir.pwd

  if component == nil then
    abort '[apes-cc] no component in this directory.'
  end

  if component_list.find { |e| e.equ?(component) } == nil then
    component_list << component
  end

when 2

  id = APEId.new(arguments[0], nil, arguments[1])
  components = component_list.find_all { |e| e.id == id }

  if components == nil or components.empty? then
    abort "[apes-cc] " + id.to_s + ": no match found."
  elsif components.length != 1 then
    abort "[apes-cc] " + id.to_s + ": multiple matches found."
  end

  component = components.first

else
  program_usage
  abort
end

#
# Look for the component in the library
#

components = component_list.find_all { |e| e.id == component.id }

if components == nil or components.empty? then
  abort "[apes-graph] " + ARGV[0] + ": no match found."
elsif components.length != 1 then
  abort "[apes-graph] " + name + ": multiple matches found."
end

#
# Compute the graph
#

dependencies = component_resolve(components[0], component_list)

if dependencies.empty? then
  puts "[apes-graph] No dependencies for: " + ARGV[0]
else
  resolved = []
  next_deps = []

  puts "digraph " + components[0].id.name + " {"

  dependencies.each do |d|
    if resolved.find { |r| r == d } == nil then
      next_deps = component_depend d, dependencies 
      puts "\t" + d.id.short_name + " [fontsize=16,style=filled];"
      next_deps.each do |n|
        puts "\t" + d.id.short_name + " -> " + n.id.short_name + ";"
      end
      resolved << d
    end
  end

  puts "}"
end
